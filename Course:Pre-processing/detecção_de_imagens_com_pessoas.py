# -*- coding: utf-8 -*-
"""Detecção de imagens com pessoas.ipynb

Automatically generated by Colaboratory.

"""

from google.colab import drive
drive.mount('/content/drive')

!ls drive/My\ Drive/People_Detection/dadosImagem

!ln -s drive/My\ Drive/People_Detection/dadosImagem /content/Aula

!ls Aula/Treinamento/positivos

import cv2

img_caminho = 'Aula/Treinamento/positivos/crop_000010.png'
img_teste = cv2.imread(img_caminho)

cv2.imshow('img',img_teste)

from google.colab.patches import cv2_imshow

cv2_imshow(img_teste)

print(type(img_teste)) #RGB - Red Green Blue
print(img_teste.shape)

import numpy as np

print(img_teste)

print("Minimo: ", np.min(img_teste))
print("Máximo: ", np.max(img_teste))

img_teste_cinza = cv2.cvtColor(img_teste, cv2.COLOR_RGB2GRAY)
cv2_imshow(img_teste_cinza)
print(img_teste_cinza.shape)

from matplotlib import pyplot as plt

print('Original: ', img_teste_cinza.shape)
img_redimensionada = cv2.resize(img_teste_cinza, (360,360), interpolation=cv2.INTER_CUBIC)
print('Redimensionada', img_redimensionada.shape)

plt.subplot(121)
plt.title('Original')
plt.imshow(img_teste_cinza, cmap='gray', interpolation='bicubic')
plt.subplot(122)
plt.title('Redimensionada')
plt.imshow(img_redimensionada, cmap='gray', interpolation='bicubic')
plt.show()

cv2_imshow(img_redimensionada)

histograma = cv2.calcHist([img_redimensionada], [0], None, [256], [0,256])
print(histograma.astype(np.int))

plt.plot(histograma)
plt.show()

img_teste_equalizada = cv2.equalizeHist(img_redimensionada)
histograma_equalizado = cv2.calcHist([img_teste_equalizada], [0], None, [256], [0,256])

plt.figure(figsize=(10,5))
plt.subplot(121)
plt.title('Inicial')
plt.plot(histograma)
plt.subplot(122)
plt.title('equalizado')
plt.plot(histograma_equalizado)

plt.figure(figsize = (10,10))
plt.subplot(121)
plt.imshow(img_redimensionada, cmap= 'gray', interpolation='bicubic')
plt.subplot(122)
plt.imshow(img_teste_equalizada, cmap= 'gray', interpolation='bicubic')
plt.show()

img_suavizada = cv2.GaussianBlur(img_teste_equalizada, (9,9), 1)

valor_retorno, img_binarizada = cv2.threshold(img_teste_equalizada, 127, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)
valor_retorno_otsu, img_binarizada_otsu = cv2.threshold(img_suavizada, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)

plt.figure(figsize = (10,10))
plt.subplot(121)
plt.title('Binarizada - Equalizada')
plt.imshow(img_binarizada, cmap = 'gray', interpolation='bicubic')

plt.subplot(122)
plt.title('Binarizada - Suavizada')
plt.imshow(img_binarizada_otsu, cmap = 'gray', interpolation='bicubic')

plt.show()

print("Limiar escolhido: ", valor_retorno, "Limiar OTSU:", valor_retorno_otsu)
